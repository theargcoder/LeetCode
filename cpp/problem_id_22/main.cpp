#include <iostream>
#include <unordered_set>
#include <vector>
using namespace std;

/* NOT WORKING SOLUTION

class Solution
{
  public:
    std::vector<std::string>
    generateParenthesis (int n)
    {
        char open_b = '(';
        char closed_b = ')';

        std::unordered_set<std::string> buff = { "()" }, next;

        int i = 2;

        while (i <= n)
            {

                int buff_size = buff.size ();
                int even = i % 2 == 0;
                // now comes the part where we enclose every combination
                // in parenthesis ( combination )

                for (auto it = buff.begin (); it != buff.end (); it++)
                    {
                        std::string str_temp;
                        str_temp += open_b;
                        str_temp += *it;
                        str_temp += closed_b;

                        next.insert (str_temp);

                        // now the part where we add the "()" at begining and
                        // end of every previous combination

                        std::string str1;

                        str1 += open_b;
                        str1 += closed_b;
                        str1 += *it;

                        next.insert (str1);

                        str1.clear ();

                        str1 += *it;
                        str1.push_back (open_b);
                        str1.push_back (closed_b);

                        next.insert (str1);
                    }
                // add permutations that the algo cant catch
                if (i >= 4)
                    {
                        std::vector<std::vector<int> > permu
                            = getIntegerPermutationsEfficient (i);
                        for (auto vect : permu)
                            {
                                std::string decoded;
                                for (int p : vect)
                                    {
                                        int p_cpy = p;
                                        while (p_cpy > 0)
                                            {
                                                decoded += open_b;
                                                p_cpy--;
                                            }
                                        while (p > 0)
                                            {
                                                decoded += closed_b;
                                                p--;
                                            }
                                    }
                                next.insert (decoded);
                            }
                    }
                // now we have done every possible valid combination so we set
                // buff equal to next

                buff = next;
                next.clear ();

                // we add 1 to i;
                i++;
            }

        std::vector<std::string> result;
        for (auto str : buff)
            {
                result.push_back (str);
            }

        return result;
    }

  private:
    std::vector<std::vector<int> >
    getIntegerPermutationsEfficient (int n)
    {
        std::vector<std::vector<int> > result;

        if (n <= 1)
            {
                return result; // Not valid for 1 or less
            }

        std::function<void (int, std::vector<int>)> generate_perms
            = [&] (int remaining_sum, std::vector<int> current_perm) {
                  if (remaining_sum == 0)
                      {
                          if (!current_perm.empty ())
                              {
                                  result.push_back (current_perm);
                              }
                          return;
                      }
                  if (remaining_sum < 0)
                      {
                          return;
                      }

                  for (int i = 2; i < n; ++i)
                      { // Iterate through valid numbers (2 to n-1)
                          std::vector<int> next_perm = current_perm;
                          next_perm.push_back (i);
                          generate_perms (remaining_sum - i, next_perm);
                      }
              };

        generate_perms (n, {}); // Start the recursion

        return result;
    }
};
*/

/* NON WORKING BUT WITH VECTORS

class Solution
{
  public:
    std::vector<std::string>
    generateParenthesis (int n)
    {
        char open_b = '(';
        char closed_b = ')';

        std::vector<std::string> buff = { "()" }, next;

        int i = 2;

        while (i <= n)
            {

                int buff_size = buff.size ();
                int even = i % 2 == 0;
                // now comes the part where we enclose every combination
                // in parenthesis ( combination )

                for (int c = 0; c < buff_size; c++)
                    {
                        std::string str_temp;
                        str_temp += open_b;
                        str_temp += buff[c];
                        str_temp += closed_b;

                        next.push_back (str_temp);

                        // now the part where we add the "()" at begining and
                        // end of every previous combination

                        std::string str1;

                        str1 += open_b;
                        str1 += closed_b;
                        str1 += buff[c];

                        next.push_back (str1);

                        str1.clear ();

                        str1 += buff[c];
                        str1.push_back (open_b);
                        str1.push_back (closed_b);

                        next.push_back (str1);

                        if (c == buff_size - 1)
                            {
                                next.pop_back ();
                            }
                    }
                // add permutations that the algo cant catch
                if (i >= 4)
                    {
                        std::vector<std::vector<int> > permu
                            = getIntegerPermutationsEfficient (i);
                        for (auto vect : permu)
                            {
                                std::string decoded;
                                for (int p : vect)
                                    {
                                        int p_cpy = p;
                                        while (p_cpy > 0)
                                            {
                                                decoded += open_b;
                                                p_cpy--;
                                            }
                                        while (p > 0)
                                            {
                                                decoded += closed_b;
                                                p--;
                                            }
                                    }
                                next.push_back (decoded);
                            }
                    }
                // now we have done every possible valid combination so we set
                // buff equal to next

                buff = next;
                next.clear ();

                // we add 1 to i;
                i++;
            }

        return buff;
    }

  private:
    std::vector<std::vector<int> >
    getIntegerPermutationsEfficient (int n)
    {
        std::vector<std::vector<int> > result;

        if (n <= 1)
            {
                return result; // Not valid for 1 or less
            }

        std::function<void (int, std::vector<int>)> generate_perms
            = [&] (int remaining_sum, std::vector<int> current_perm) {
                  if (remaining_sum == 0)
                      {
                          if (!current_perm.empty ())
                              {
                                  result.push_back (current_perm);
                              }
                          return;
                      }
                  if (remaining_sum < 0)
                      {
                          return;
                      }

                  for (int i = 2; i < n; ++i)
                      { // Iterate through valid numbers (2 to n-1)
                          std::vector<int> next_perm = current_perm;
                          next_perm.push_back (i);
                          generate_perms (remaining_sum - i, next_perm);
                      }
              };

        generate_perms (n, {}); // Start the recursion

        return result;
    }
};
*/

class Solution
{
  public:
    vector<string>
    generateParenthesis (int n)
    {
        vector<string> ans;
        dfs (n, n, "", ans);
        return ans;
    }

  private:
    void
    dfs (int l, int r, string &&path, vector<string> &ans)
    {
        if (l == 0 && r == 0)
            {
                ans.push_back (path);
                return;
            }

        if (l > 0)
            {
                path.push_back ('(');
                dfs (l - 1, r, std::move (path), ans);
                path.pop_back ();
            }
        if (l < r)
            {
                path.push_back (')');
                dfs (l, r - 1, std::move (path), ans);
                path.pop_back ();
            }
    }
};

void
compareStringVectorsIgnoringOrder (std::vector<std::string> &inputVector,
                                   std::vector<std::string> &expectedVector)
{
    if (inputVector.empty ())
        return;
    // Iterate through the input vector
    for (auto ip = inputVector.begin (); ip != inputVector.end ();)
        {
            // Find the current input string in the expected vector
            auto it = std::find (expectedVector.begin (),
                                 expectedVector.end (), *ip);

            // If a match is found
            if (it != expectedVector.end ())
                {
                    // Erase the matched string from the expected vector
                    expectedVector.erase (it);
                    ip = inputVector.erase (
                        ip); // erase from inputVector and update iterator
                }
            else
                {
                    ++ip; // Increment iterator only if no erase happened
                }
        }

    // Print the contents of the input vector after processing
    std::cout << "Result" << std::endl;
    for (const auto str : inputVector)
        {
            std::cout << str << ", ";
        }
    std::cout << '\n';

    // Print the contents of the expected vector after processing
    std::cout << "EXPECTED" << std::endl;
    for (const auto str : expectedVector)
        {
            std::cout << str << ", ";
        }
    std::cout << '\n';
}

int
main ()
{

    std::vector<std::vector<std::string> > expected{
        { "()" },
        { "(())", "()()" },
        { "((()))", "(()())", "(())()", "()(())", "()()()" },
        { "(((())))", "((()()))", "((())())", "((()))()", "(()(()))",
          "(()()())", "(()())()", "(())(())", "(())()()", "()((()))",
          "()(()())", "()(())()", "()()(())", "()()()()" },
        { "()()()()()", "()()()(())", "()()(())()", "()()((()))", "()(())()()",
          "()(())(())", "()((()))()", "()(((())))", "(())()()()", "(())()(())",
          "(())(())()", "(())((()))", "((()))()()", "((()))(())", "(((())))()",
          "((((()))))", "(()())()()", "(()()())()", "(()()()())", "()(()())()",
          "()(()()())", "()()(()())", "(()())(())", "(()()(()))", "()(()(()))",
          "(()(()))()", "(()(())())", "()((())())", "(()((())))", "((())())()",
          "((())()())", "(())(()())", "((())(()))", "(((()))())" },
        { "(((((())))))", "((((()()))))", "((((())())))", "((((()))()))",
          "((((())))())", "((((()))))()", "(((()(()))))", "(((()()())))",
          "(((()())()))", "(((()()))())", "(((()())))()", "(((())(())))",
          "(((())()()))", "(((())())())", "(((())()))()", "(((()))(()))",
          "(((()))()())", "(((()))())()", "(((())))(())", "(((())))()()",
          "((()((()))))", "((()(()())))", "((()(())()))", "((()(()))())",
          "((()(())))()", "((()()(())))", "((()()()()))", "((()()())())",
          "((()()()))()", "((()())(()))", "((()())()())", "((()())())()",
          "((()()))(())", "((()()))()()", "((())((())))", "((())(()()))",
          "((())(())())", "((())(()))()", "((())()(()))", "((())()()())",
          "((())()())()", "((())())(())", "((())())()()", "((()))((()))",
          "((()))(()())", "((()))(())()", "((()))()(())", "((()))()()()",
          "(()(((()))))", "(()((()())))", "(()((())()))", "(()((()))())",
          "(()((())))()", "(()(()(())))", "(()(()()()))", "(()(()())())",
          "(()(()()))()", "(()(())(()))", "(()(())()())", "(()(())())()",
          "(()(()))(())", "(()(()))()()", "(()()((())))", "(()()(()()))",
          "(()()(())())", "(()()(()))()", "(()()()(()))", "(()()()()())",
          "(()()()())()", "(()()())(())", "(()()())()()", "(()())((()))",
          "(()())(()())", "(()())(())()", "(()())()(())", "(()())()()()",
          "(())(((())))", "(())((()()))", "(())((())())", "(())((()))()",
          "(())(()(()))", "(())(()()())", "(())(()())()", "(())(())(())",
          "(())(())()()", "(())()((()))", "(())()(()())", "(())()(())()",
          "(())()()(())", "(())()()()()", "()((((()))))", "()(((()())))",
          "()(((())()))", "()(((()))())", "()(((())))()", "()((()(())))",
          "()((()()()))", "()((()())())", "()((()()))()", "()((())(()))",
          "()((())()())", "()((())())()", "()((()))(())", "()((()))()()",
          "()(()((())))", "()(()(()()))", "()(()(())())", "()(()(()))()",
          "()(()()(()))", "()(()()()())", "()(()()())()", "()(()())(())",
          "()(()())()()", "()(())((()))", "()(())(()())", "()(())(())()",
          "()(())()(())", "()(())()()()", "()()(((())))", "()()((()()))",
          "()()((())())", "()()((()))()", "()()(()(()))", "()()(()()())",
          "()()(()())()", "()()(())(())", "()()(())()()", "()()()((()))",
          "()()()(()())", "()()()(())()", "()()()()(())", "()()()()()()" },
        { "((((((()))))))", "(((((()())))))", "(((((())()))))",
          "(((((()))())))", "(((((())))()))", "(((((()))))())",
          "(((((())))))()", "((((()(())))))", "((((()()()))))",
          "((((()())())))", "((((()()))()))", "((((()())))())",
          "((((()()))))()", "((((())(()))))", "((((())()())))",
          "((((())())()))", "((((())()))())", "((((())())))()",
          "((((()))(())))", "((((()))()()))", "((((()))())())",
          "((((()))()))()", "((((())))(()))", "((((())))()())",
          "((((())))())()", "((((()))))(())", "((((()))))()()",
          "(((()((())))))", "(((()(()()))))", "(((()(())())))",
          "(((()(()))()))", "(((()(())))())", "(((()(()))))()",
          "(((()()(()))))", "(((()()()())))", "(((()()())()))",
          "(((()()()))())", "(((()()())))()", "(((()())(())))",
          "(((()())()()))", "(((()())())())", "(((()())()))()",
          "(((()()))(()))", "(((()()))()())", "(((()()))())()",
          "(((()())))(())", "(((()())))()()", "(((())((()))))",
          "(((())(()())))", "(((())(())()))", "(((())(()))())",
          "(((())(())))()", "(((())()(())))", "(((())()()()))",
          "(((())()())())", "(((())()()))()", "(((())())(()))",
          "(((())())()())", "(((())())())()", "(((())()))(())",
          "(((())()))()()", "(((()))((())))", "(((()))(()()))",
          "(((()))(())())", "(((()))(()))()", "(((()))()(()))",
          "(((()))()()())", "(((()))()())()", "(((()))())(())",
          "(((()))())()()", "(((())))((()))", "(((())))(()())",
          "(((())))(())()", "(((())))()(())", "(((())))()()()",
          "((()(((())))))", "((()((()()))))", "((()((())())))",
          "((()((()))()))", "((()((())))())", "((()((()))))()",
          "((()(()(()))))", "((()(()()())))", "((()(()())()))",
          "((()(()()))())", "((()(()())))()", "((()(())(())))",
          "((()(())()()))", "((()(())())())", "((()(())()))()",
          "((()(()))(()))", "((()(()))()())", "((()(()))())()",
          "((()(())))(())", "((()(())))()()", "((()()((()))))",
          "((()()(()())))", "((()()(())()))", "((()()(()))())",
          "((()()(())))()", "((()()()(())))", "((()()()()()))",
          "((()()()())())", "((()()()()))()", "((()()())(()))",
          "((()()())()())", "((()()())())()", "((()()()))(())",
          "((()()()))()()", "((()())((())))", "((()())(()()))",
          "((()())(())())", "((()())(()))()", "((()())()(()))",
          "((()())()()())", "((()())()())()", "((()())())(())",
          "((()())())()()", "((()()))((()))", "((()()))(()())",
          "((()()))(())()", "((()()))()(())", "((()()))()()()",
          "((())(((()))))", "((())((()())))", "((())((())()))",
          "((())((()))())", "((())((())))()", "((())(()(())))",
          "((())(()()()))", "((())(()())())", "((())(()()))()",
          "((())(())(()))", "((())(())()())", "((())(())())()",
          "((())(()))(())", "((())(()))()()", "((())()((())))",
          "((())()(()()))", "((())()(())())", "((())()(()))()",
          "((())()()(()))", "((())()()()())", "((())()()())()",
          "((())()())(())", "((())()())()()", "((())())((()))",
          "((())())(()())", "((())())(())()", "((())())()(())",
          "((())())()()()", "((()))(((())))", "((()))((()()))",
          "((()))((())())", "((()))((()))()", "((()))(()(()))",
          "((()))(()()())", "((()))(()())()", "((()))(())(())",
          "((()))(())()()", "((()))()((()))", "((()))()(()())",
          "((()))()(())()", "((()))()()(())", "((()))()()()()",
          "(()((((())))))", "(()(((()()))))", "(()(((())())))",
          "(()(((()))()))", "(()(((())))())", "(()(((()))))()",
          "(()((()(()))))", "(()((()()())))", "(()((()())()))",
          "(()((()()))())", "(()((()())))()", "(()((())(())))",
          "(()((())()()))", "(()((())())())", "(()((())()))()",
          "(()((()))(()))", "(()((()))()())", "(()((()))())()",
          "(()((())))(())", "(()((())))()()", "(()(()((()))))",
          "(()(()(()())))", "(()(()(())()))", "(()(()(()))())",
          "(()(()(())))()", "(()(()()(())))", "(()(()()()()))",
          "(()(()()())())", "(()(()()()))()", "(()(()())(()))",
          "(()(()())()())", "(()(()())())()", "(()(()()))(())",
          "(()(()()))()()", "(()(())((())))", "(()(())(()()))",
          "(()(())(())())", "(()(())(()))()", "(()(())()(()))",
          "(()(())()()())", "(()(())()())()", "(()(())())(())",
          "(()(())())()()", "(()(()))((()))", "(()(()))(()())",
          "(()(()))(())()", "(()(()))()(())", "(()(()))()()()",
          "(()()(((()))))", "(()()((()())))", "(()()((())()))",
          "(()()((()))())", "(()()((())))()", "(()()(()(())))",
          "(()()(()()()))", "(()()(()())())", "(()()(()()))()",
          "(()()(())(()))", "(()()(())()())", "(()()(())())()",
          "(()()(()))(())", "(()()(()))()()", "(()()()((())))",
          "(()()()(()()))", "(()()()(())())", "(()()()(()))()",
          "(()()()()(()))", "(()()()()()())", "(()()()()())()",
          "(()()()())(())", "(()()()())()()", "(()()())((()))",
          "(()()())(()())", "(()()())(())()", "(()()())()(())",
          "(()()())()()()", "(()())(((())))", "(()())((()()))",
          "(()())((())())", "(()())((()))()", "(()())(()(()))",
          "(()())(()()())", "(()())(()())()", "(()())(())(())",
          "(()())(())()()", "(()())()((()))", "(()())()(()())",
          "(()())()(())()", "(()())()()(())", "(()())()()()()",
          "(())((((()))))", "(())(((()())))", "(())(((())()))",
          "(())(((()))())", "(())(((())))()", "(())((()(())))",
          "(())((()()()))", "(())((()())())", "(())((()()))()",
          "(())((())(()))", "(())((())()())", "(())((())())()",
          "(())((()))(())", "(())((()))()()", "(())(()((())))",
          "(())(()(()()))", "(())(()(())())", "(())(()(()))()",
          "(())(()()(()))", "(())(()()()())", "(())(()()())()",
          "(())(()())(())", "(())(()())()()", "(())(())((()))",
          "(())(())(()())", "(())(())(())()", "(())(())()(())",
          "(())(())()()()", "(())()(((())))", "(())()((()()))",
          "(())()((())())", "(())()((()))()", "(())()(()(()))",
          "(())()(()()())", "(())()(()())()", "(())()(())(())",
          "(())()(())()()", "(())()()((()))", "(())()()(()())",
          "(())()()(())()", "(())()()()(())", "(())()()()()()",
          "()(((((())))))", "()((((()()))))", "()((((())())))",
          "()((((()))()))", "()((((())))())", "()((((()))))()",
          "()(((()(()))))", "()(((()()())))", "()(((()())()))",
          "()(((()()))())", "()(((()())))()", "()(((())(())))",
          "()(((())()()))", "()(((())())())", "()(((())()))()",
          "()(((()))(()))", "()(((()))()())", "()(((()))())()",
          "()(((())))(())", "()(((())))()()", "()((()((()))))",
          "()((()(()())))", "()((()(())()))", "()((()(()))())",
          "()((()(())))()", "()((()()(())))", "()((()()()()))",
          "()((()()())())", "()((()()()))()", "()((()())(()))",
          "()((()())()())", "()((()())())()", "()((()()))(())",
          "()((()()))()()", "()((())((())))", "()((())(()()))",
          "()((())(())())", "()((())(()))()", "()((())()(()))",
          "()((())()()())", "()((())()())()", "()((())())(())",
          "()((())())()()", "()((()))((()))", "()((()))(()())",
          "()((()))(())()", "()((()))()(())", "()((()))()()()",
          "()(()(((()))))", "()(()((()())))", "()(()((())()))",
          "()(()((()))())", "()(()((())))()", "()(()(()(())))",
          "()(()(()()()))", "()(()(()())())", "()(()(()()))()",
          "()(()(())(()))", "()(()(())()())", "()(()(())())()",
          "()(()(()))(())", "()(()(()))()()", "()(()()((())))",
          "()(()()(()()))", "()(()()(())())", "()(()()(()))()",
          "()(()()()(()))", "()(()()()()())", "()(()()()())()",
          "()(()()())(())", "()(()()())()()", "()(()())((()))",
          "()(()())(()())", "()(()())(())()", "()(()())()(())",
          "()(()())()()()", "()(())(((())))", "()(())((()()))",
          "()(())((())())", "()(())((()))()", "()(())(()(()))",
          "()(())(()()())", "()(())(()())()", "()(())(())(())",
          "()(())(())()()", "()(())()((()))", "()(())()(()())",
          "()(())()(())()", "()(())()()(())", "()(())()()()()",
          "()()((((()))))", "()()(((()())))", "()()(((())()))",
          "()()(((()))())", "()()(((())))()", "()()((()(())))",
          "()()((()()()))", "()()((()())())", "()()((()()))()",
          "()()((())(()))", "()()((())()())", "()()((())())()",
          "()()((()))(())", "()()((()))()()", "()()(()((())))",
          "()()(()(()()))", "()()(()(())())", "()()(()(()))()",
          "()()(()()(()))", "()()(()()()())", "()()(()()())()",
          "()()(()())(())", "()()(()())()()", "()()(())((()))",
          "()()(())(()())", "()()(())(())()", "()()(())()(())",
          "()()(())()()()", "()()()(((())))", "()()()((()()))",
          "()()()((())())", "()()()((()))()", "()()()(()(()))",
          "()()()(()()())", "()()()(()())()", "()()()(())(())",
          "()()()(())()()", "()()()()((()))", "()()()()(()())",
          "()()()()(())()", "()()()()()(())", "()()()()()()()" },
        { "(((((((())))))))", "((((((()()))))))", "((((((())())))))",
          "((((((()))()))))", "((((((())))())))", "((((((()))))()))",
          "((((((())))))())", "((((((()))))))()", "(((((()(()))))))",
          "(((((()()())))))", "(((((()())()))))", "(((((()()))())))",
          "(((((()())))()))", "(((((()()))))())", "(((((()())))))()",
          "(((((())(())))))", "(((((())()()))))", "(((((())())())))",
          "(((((())()))()))", "(((((())())))())", "(((((())()))))()",
          "(((((()))(()))))", "(((((()))()())))", "(((((()))())()))",
          "(((((()))()))())", "(((((()))())))()", "(((((())))(())))",
          "(((((())))()()))", "(((((())))())())", "(((((())))()))()",
          "(((((()))))(()))", "(((((()))))()())", "(((((()))))())()",
          "(((((())))))(())", "(((((())))))()()", "((((()((()))))))",
          "((((()(()())))))", "((((()(())()))))", "((((()(()))())))",
          "((((()(())))()))", "((((()(()))))())", "((((()(())))))()",
          "((((()()(())))))", "((((()()()()))))", "((((()()())())))",
          "((((()()()))()))", "((((()()())))())", "((((()()()))))()",
          "((((()())(()))))", "((((()())()())))", "((((()())())()))",
          "((((()())()))())", "((((()())())))()", "((((()()))(())))",
          "((((()()))()()))", "((((()()))())())", "((((()()))()))()",
          "((((()())))(()))", "((((()())))()())", "((((()())))())()",
          "((((()()))))(())", "((((()()))))()()", "((((())((())))))",
          "((((())(()()))))", "((((())(())())))", "((((())(()))()))",
          "((((())(())))())", "((((())(()))))()", "((((())()(()))))",
          "((((())()()())))", "((((())()())()))", "((((())()()))())",
          "((((())()())))()", "((((())())(())))", "((((())())()()))",
          "((((())())())())", "((((())())()))()", "((((())()))(()))",
          "((((())()))()())", "((((())()))())()", "((((())())))(())",
          "((((())())))()()", "((((()))((()))))", "((((()))(()())))",
          "((((()))(())()))", "((((()))(()))())", "((((()))(())))()",
          "((((()))()(())))", "((((()))()()()))", "((((()))()())())",
          "((((()))()()))()", "((((()))())(()))", "((((()))())()())",
          "((((()))())())()", "((((()))()))(())", "((((()))()))()()",
          "((((())))((())))", "((((())))(()()))", "((((())))(())())",
          "((((())))(()))()", "((((())))()(()))", "((((())))()()())",
          "((((())))()())()", "((((())))())(())", "((((())))())()()",
          "((((()))))((()))", "((((()))))(()())", "((((()))))(())()",
          "((((()))))()(())", "((((()))))()()()", "(((()(((()))))))",
          "(((()((()())))))", "(((()((())()))))", "(((()((()))())))",
          "(((()((())))()))", "(((()((()))))())", "(((()((())))))()",
          "(((()(()(())))))", "(((()(()()()))))", "(((()(()())())))",
          "(((()(()()))()))", "(((()(()())))())", "(((()(()()))))()",
          "(((()(())(()))))", "(((()(())()())))", "(((()(())())()))",
          "(((()(())()))())", "(((()(())())))()", "(((()(()))(())))",
          "(((()(()))()()))", "(((()(()))())())", "(((()(()))()))()",
          "(((()(())))(()))", "(((()(())))()())", "(((()(())))())()",
          "(((()(()))))(())", "(((()(()))))()()", "(((()()((())))))",
          "(((()()(()()))))", "(((()()(())())))", "(((()()(()))()))",
          "(((()()(())))())", "(((()()(()))))()", "(((()()()(()))))",
          "(((()()()()())))", "(((()()()())()))", "(((()()()()))())",
          "(((()()()())))()", "(((()()())(())))", "(((()()())()()))",
          "(((()()())())())", "(((()()())()))()", "(((()()()))(()))",
          "(((()()()))()())", "(((()()()))())()", "(((()()())))(())",
          "(((()()())))()()", "(((()())((()))))", "(((()())(()())))",
          "(((()())(())()))", "(((()())(()))())", "(((()())(())))()",
          "(((()())()(())))", "(((()())()()()))", "(((()())()())())",
          "(((()())()()))()", "(((()())())(()))", "(((()())())()())",
          "(((()())())())()", "(((()())()))(())", "(((()())()))()()",
          "(((()()))((())))", "(((()()))(()()))", "(((()()))(())())",
          "(((()()))(()))()", "(((()()))()(()))", "(((()()))()()())",
          "(((()()))()())()", "(((()()))())(())", "(((()()))())()()",
          "(((()())))((()))", "(((()())))(()())", "(((()())))(())()",
          "(((()())))()(())", "(((()())))()()()", "(((())(((())))))",
          "(((())((()()))))", "(((())((())())))", "(((())((()))()))",
          "(((())((())))())", "(((())((()))))()", "(((())(()(()))))",
          "(((())(()()())))", "(((())(()())()))", "(((())(()()))())",
          "(((())(()())))()", "(((())(())(())))", "(((())(())()()))",
          "(((())(())())())", "(((())(())()))()", "(((())(()))(()))",
          "(((())(()))()())", "(((())(()))())()", "(((())(())))(())",
          "(((())(())))()()", "(((())()((()))))", "(((())()(()())))",
          "(((())()(())()))", "(((())()(()))())", "(((())()(())))()",
          "(((())()()(())))", "(((())()()()()))", "(((())()()())())",
          "(((())()()()))()", "(((())()())(()))", "(((())()())()())",
          "(((())()())())()", "(((())()()))(())", "(((())()()))()()",
          "(((())())((())))", "(((())())(()()))", "(((())())(())())",
          "(((())())(()))()", "(((())())()(()))", "(((())())()()())",
          "(((())())()())()", "(((())())())(())", "(((())())())()()",
          "(((())()))((()))", "(((())()))(()())", "(((())()))(())()",
          "(((())()))()(())", "(((())()))()()()", "(((()))(((()))))",
          "(((()))((()())))", "(((()))((())()))", "(((()))((()))())",
          "(((()))((())))()", "(((()))(()(())))", "(((()))(()()()))",
          "(((()))(()())())", "(((()))(()()))()", "(((()))(())(()))",
          "(((()))(())()())", "(((()))(())())()", "(((()))(()))(())",
          "(((()))(()))()()", "(((()))()((())))", "(((()))()(()()))",
          "(((()))()(())())", "(((()))()(()))()", "(((()))()()(()))",
          "(((()))()()()())", "(((()))()()())()", "(((()))()())(())",
          "(((()))()())()()", "(((()))())((()))", "(((()))())(()())",
          "(((()))())(())()", "(((()))())()(())", "(((()))())()()()",
          "(((())))(((())))", "(((())))((()()))", "(((())))((())())",
          "(((())))((()))()", "(((())))(()(()))", "(((())))(()()())",
          "(((())))(()())()", "(((())))(())(())", "(((())))(())()()",
          "(((())))()((()))", "(((())))()(()())", "(((())))()(())()",
          "(((())))()()(())", "(((())))()()()()", "((()((((()))))))",
          "((()(((()())))))", "((()(((())()))))", "((()(((()))())))",
          "((()(((())))()))", "((()(((()))))())", "((()(((())))))()",
          "((()((()(())))))", "((()((()()()))))", "((()((()())())))",
          "((()((()()))()))", "((()((()())))())", "((()((()()))))()",
          "((()((())(()))))", "((()((())()())))", "((()((())())()))",
          "((()((())()))())", "((()((())())))()", "((()((()))(())))",
          "((()((()))()()))", "((()((()))())())", "((()((()))()))()",
          "((()((())))(()))", "((()((())))()())", "((()((())))())()",
          "((()((()))))(())", "((()((()))))()()", "((()(()((())))))",
          "((()(()(()()))))", "((()(()(())())))", "((()(()(()))()))",
          "((()(()(())))())", "((()(()(()))))()", "((()(()()(()))))",
          "((()(()()()())))", "((()(()()())()))", "((()(()()()))())",
          "((()(()()())))()", "((()(()())(())))", "((()(()())()()))",
          "((()(()())())())", "((()(()())()))()", "((()(()()))(()))",
          "((()(()()))()())", "((()(()()))())()", "((()(()())))(())",
          "((()(()())))()()", "((()(())((()))))", "((()(())(()())))",
          "((()(())(())()))", "((()(())(()))())", "((()(())(())))()",
          "((()(())()(())))", "((()(())()()()))", "((()(())()())())",
          "((()(())()()))()", "((()(())())(()))", "((()(())())()())",
          "((()(())())())()", "((()(())()))(())", "((()(())()))()()",
          "((()(()))((())))", "((()(()))(()()))", "((()(()))(())())",
          "((()(()))(()))()", "((()(()))()(()))", "((()(()))()()())",
          "((()(()))()())()", "((()(()))())(())", "((()(()))())()()",
          "((()(())))((()))", "((()(())))(()())", "((()(())))(())()",
          "((()(())))()(())", "((()(())))()()()", "((()()(((())))))",
          "((()()((()()))))", "((()()((())())))", "((()()((()))()))",
          "((()()((())))())", "((()()((()))))()", "((()()(()(()))))",
          "((()()(()()())))", "((()()(()())()))", "((()()(()()))())",
          "((()()(()())))()", "((()()(())(())))", "((()()(())()()))",
          "((()()(())())())", "((()()(())()))()", "((()()(()))(()))",
          "((()()(()))()())", "((()()(()))())()", "((()()(())))(())",
          "((()()(())))()()", "((()()()((()))))", "((()()()(()())))",
          "((()()()(())()))", "((()()()(()))())", "((()()()(())))()",
          "((()()()()(())))", "((()()()()()()))", "((()()()()())())",
          "((()()()()()))()", "((()()()())(()))", "((()()()())()())",
          "((()()()())())()", "((()()()()))(())", "((()()()()))()()",
          "((()()())((())))", "((()()())(()()))", "((()()())(())())",
          "((()()())(()))()", "((()()())()(()))", "((()()())()()())",
          "((()()())()())()", "((()()())())(())", "((()()())())()()",
          "((()()()))((()))", "((()()()))(()())", "((()()()))(())()",
          "((()()()))()(())", "((()()()))()()()", "((()())(((()))))",
          "((()())((()())))", "((()())((())()))", "((()())((()))())",
          "((()())((())))()", "((()())(()(())))", "((()())(()()()))",
          "((()())(()())())", "((()())(()()))()", "((()())(())(()))",
          "((()())(())()())", "((()())(())())()", "((()())(()))(())",
          "((()())(()))()()", "((()())()((())))", "((()())()(()()))",
          "((()())()(())())", "((()())()(()))()", "((()())()()(()))",
          "((()())()()()())", "((()())()()())()", "((()())()())(())",
          "((()())()())()()", "((()())())((()))", "((()())())(()())",
          "((()())())(())()", "((()())())()(())", "((()())())()()()",
          "((()()))(((())))", "((()()))((()()))", "((()()))((())())",
          "((()()))((()))()", "((()()))(()(()))", "((()()))(()()())",
          "((()()))(()())()", "((()()))(())(())", "((()()))(())()()",
          "((()()))()((()))", "((()()))()(()())", "((()()))()(())()",
          "((()()))()()(())", "((()()))()()()()", "((())((((())))))",
          "((())(((()()))))", "((())(((())())))", "((())(((()))()))",
          "((())(((())))())", "((())(((()))))()", "((())((()(()))))",
          "((())((()()())))", "((())((()())()))", "((())((()()))())",
          "((())((()())))()", "((())((())(())))", "((())((())()()))",
          "((())((())())())", "((())((())()))()", "((())((()))(()))",
          "((())((()))()())", "((())((()))())()", "((())((())))(())",
          "((())((())))()()", "((())(()((()))))", "((())(()(()())))",
          "((())(()(())()))", "((())(()(()))())", "((())(()(())))()",
          "((())(()()(())))", "((())(()()()()))", "((())(()()())())",
          "((())(()()()))()", "((())(()())(()))", "((())(()())()())",
          "((())(()())())()", "((())(()()))(())", "((())(()()))()()",
          "((())(())((())))", "((())(())(()()))", "((())(())(())())",
          "((())(())(()))()", "((())(())()(()))", "((())(())()()())",
          "((())(())()())()", "((())(())())(())", "((())(())())()()",
          "((())(()))((()))", "((())(()))(()())", "((())(()))(())()",
          "((())(()))()(())", "((())(()))()()()", "((())()(((()))))",
          "((())()((()())))", "((())()((())()))", "((())()((()))())",
          "((())()((())))()", "((())()(()(())))", "((())()(()()()))",
          "((())()(()())())", "((())()(()()))()", "((())()(())(()))",
          "((())()(())()())", "((())()(())())()", "((())()(()))(())",
          "((())()(()))()()", "((())()()((())))", "((())()()(()()))",
          "((())()()(())())", "((())()()(()))()", "((())()()()(()))",
          "((())()()()()())", "((())()()()())()", "((())()()())(())",
          "((())()()())()()", "((())()())((()))", "((())()())(()())",
          "((())()())(())()", "((())()())()(())", "((())()())()()()",
          "((())())(((())))", "((())())((()()))", "((())())((())())",
          "((())())((()))()", "((())())(()(()))", "((())())(()()())",
          "((())())(()())()", "((())())(())(())", "((())())(())()()",
          "((())())()((()))", "((())())()(()())", "((())())()(())()",
          "((())())()()(())", "((())())()()()()", "((()))((((()))))",
          "((()))(((()())))", "((()))(((())()))", "((()))(((()))())",
          "((()))(((())))()", "((()))((()(())))", "((()))((()()()))",
          "((()))((()())())", "((()))((()()))()", "((()))((())(()))",
          "((()))((())()())", "((()))((())())()", "((()))((()))(())",
          "((()))((()))()()", "((()))(()((())))", "((()))(()(()()))",
          "((()))(()(())())", "((()))(()(()))()", "((()))(()()(()))",
          "((()))(()()()())", "((()))(()()())()", "((()))(()())(())",
          "((()))(()())()()", "((()))(())((()))", "((()))(())(()())",
          "((()))(())(())()", "((()))(())()(())", "((()))(())()()()",
          "((()))()(((())))", "((()))()((()()))", "((()))()((())())",
          "((()))()((()))()", "((()))()(()(()))", "((()))()(()()())",
          "((()))()(()())()", "((()))()(())(())", "((()))()(())()()",
          "((()))()()((()))", "((()))()()(()())", "((()))()()(())()",
          "((()))()()()(())", "((()))()()()()()", "(()(((((()))))))",
          "(()((((()())))))", "(()((((())()))))", "(()((((()))())))",
          "(()((((())))()))", "(()((((()))))())", "(()((((())))))()",
          "(()(((()(())))))", "(()(((()()()))))", "(()(((()())())))",
          "(()(((()()))()))", "(()(((()())))())", "(()(((()()))))()",
          "(()(((())(()))))", "(()(((())()())))", "(()(((())())()))",
          "(()(((())()))())", "(()(((())())))()", "(()(((()))(())))",
          "(()(((()))()()))", "(()(((()))())())", "(()(((()))()))()",
          "(()(((())))(()))", "(()(((())))()())", "(()(((())))())()",
          "(()(((()))))(())", "(()(((()))))()()", "(()((()((())))))",
          "(()((()(()()))))", "(()((()(())())))", "(()((()(()))()))",
          "(()((()(())))())", "(()((()(()))))()", "(()((()()(()))))",
          "(()((()()()())))", "(()((()()())()))", "(()((()()()))())",
          "(()((()()())))()", "(()((()())(())))", "(()((()())()()))",
          "(()((()())())())", "(()((()())()))()", "(()((()()))(()))",
          "(()((()()))()())", "(()((()()))())()", "(()((()())))(())",
          "(()((()())))()()", "(()((())((()))))", "(()((())(()())))",
          "(()((())(())()))", "(()((())(()))())", "(()((())(())))()",
          "(()((())()(())))", "(()((())()()()))", "(()((())()())())",
          "(()((())()()))()", "(()((())())(()))", "(()((())())()())",
          "(()((())())())()", "(()((())()))(())", "(()((())()))()()",
          "(()((()))((())))", "(()((()))(()()))", "(()((()))(())())",
          "(()((()))(()))()", "(()((()))()(()))", "(()((()))()()())",
          "(()((()))()())()", "(()((()))())(())", "(()((()))())()()",
          "(()((())))((()))", "(()((())))(()())", "(()((())))(())()",
          "(()((())))()(())", "(()((())))()()()", "(()(()(((())))))",
          "(()(()((()()))))", "(()(()((())())))", "(()(()((()))()))",
          "(()(()((())))())", "(()(()((()))))()", "(()(()(()(()))))",
          "(()(()(()()())))", "(()(()(()())()))", "(()(()(()()))())",
          "(()(()(()())))()", "(()(()(())(())))", "(()(()(())()()))",
          "(()(()(())())())", "(()(()(())()))()", "(()(()(()))(()))",
          "(()(()(()))()())", "(()(()(()))())()", "(()(()(())))(())",
          "(()(()(())))()()", "(()(()()((()))))", "(()(()()(()())))",
          "(()(()()(())()))", "(()(()()(()))())", "(()(()()(())))()",
          "(()(()()()(())))", "(()(()()()()()))", "(()(()()()())())",
          "(()(()()()()))()", "(()(()()())(()))", "(()(()()())()())",
          "(()(()()())())()", "(()(()()()))(())", "(()(()()()))()()",
          "(()(()())((())))", "(()(()())(()()))", "(()(()())(())())",
          "(()(()())(()))()", "(()(()())()(()))", "(()(()())()()())",
          "(()(()())()())()", "(()(()())())(())", "(()(()())())()()",
          "(()(()()))((()))", "(()(()()))(()())", "(()(()()))(())()",
          "(()(()()))()(())", "(()(()()))()()()", "(()(())(((()))))",
          "(()(())((()())))", "(()(())((())()))", "(()(())((()))())",
          "(()(())((())))()", "(()(())(()(())))", "(()(())(()()()))",
          "(()(())(()())())", "(()(())(()()))()", "(()(())(())(()))",
          "(()(())(())()())", "(()(())(())())()", "(()(())(()))(())",
          "(()(())(()))()()", "(()(())()((())))", "(()(())()(()()))",
          "(()(())()(())())", "(()(())()(()))()", "(()(())()()(()))",
          "(()(())()()()())", "(()(())()()())()", "(()(())()())(())",
          "(()(())()())()()", "(()(())())((()))", "(()(())())(()())",
          "(()(())())(())()", "(()(())())()(())", "(()(())())()()()",
          "(()(()))(((())))", "(()(()))((()()))", "(()(()))((())())",
          "(()(()))((()))()", "(()(()))(()(()))", "(()(()))(()()())",
          "(()(()))(()())()", "(()(()))(())(())", "(()(()))(())()()",
          "(()(()))()((()))", "(()(()))()(()())", "(()(()))()(())()",
          "(()(()))()()(())", "(()(()))()()()()", "(()()((((())))))",
          "(()()(((()()))))", "(()()(((())())))", "(()()(((()))()))",
          "(()()(((())))())", "(()()(((()))))()", "(()()((()(()))))",
          "(()()((()()())))", "(()()((()())()))", "(()()((()()))())",
          "(()()((()())))()", "(()()((())(())))", "(()()((())()()))",
          "(()()((())())())", "(()()((())()))()", "(()()((()))(()))",
          "(()()((()))()())", "(()()((()))())()", "(()()((())))(())",
          "(()()((())))()()", "(()()(()((()))))", "(()()(()(()())))",
          "(()()(()(())()))", "(()()(()(()))())", "(()()(()(())))()",
          "(()()(()()(())))", "(()()(()()()()))", "(()()(()()())())",
          "(()()(()()()))()", "(()()(()())(()))", "(()()(()())()())",
          "(()()(()())())()", "(()()(()()))(())", "(()()(()()))()()",
          "(()()(())((())))", "(()()(())(()()))", "(()()(())(())())",
          "(()()(())(()))()", "(()()(())()(()))", "(()()(())()()())",
          "(()()(())()())()", "(()()(())())(())", "(()()(())())()()",
          "(()()(()))((()))", "(()()(()))(()())", "(()()(()))(())()",
          "(()()(()))()(())", "(()()(()))()()()", "(()()()(((()))))",
          "(()()()((()())))", "(()()()((())()))", "(()()()((()))())",
          "(()()()((())))()", "(()()()(()(())))", "(()()()(()()()))",
          "(()()()(()())())", "(()()()(()()))()", "(()()()(())(()))",
          "(()()()(())()())", "(()()()(())())()", "(()()()(()))(())",
          "(()()()(()))()()", "(()()()()((())))", "(()()()()(()()))",
          "(()()()()(())())", "(()()()()(()))()", "(()()()()()(()))",
          "(()()()()()()())", "(()()()()()())()", "(()()()()())(())",
          "(()()()()())()()", "(()()()())((()))", "(()()()())(()())",
          "(()()()())(())()", "(()()()())()(())", "(()()()())()()()",
          "(()()())(((())))", "(()()())((()()))", "(()()())((())())",
          "(()()())((()))()", "(()()())(()(()))", "(()()())(()()())",
          "(()()())(()())()", "(()()())(())(())", "(()()())(())()()",
          "(()()())()((()))", "(()()())()(()())", "(()()())()(())()",
          "(()()())()()(())", "(()()())()()()()", "(()())((((()))))",
          "(()())(((()())))", "(()())(((())()))", "(()())(((()))())",
          "(()())(((())))()", "(()())((()(())))", "(()())((()()()))",
          "(()())((()())())", "(()())((()()))()", "(()())((())(()))",
          "(()())((())()())", "(()())((())())()", "(()())((()))(())",
          "(()())((()))()()", "(()())(()((())))", "(()())(()(()()))",
          "(()())(()(())())", "(()())(()(()))()", "(()())(()()(()))",
          "(()())(()()()())", "(()())(()()())()", "(()())(()())(())",
          "(()())(()())()()", "(()())(())((()))", "(()())(())(()())",
          "(()())(())(())()", "(()())(())()(())", "(()())(())()()()",
          "(()())()(((())))", "(()())()((()()))", "(()())()((())())",
          "(()())()((()))()", "(()())()(()(()))", "(()())()(()()())",
          "(()())()(()())()", "(()())()(())(())", "(()())()(())()()",
          "(()())()()((()))", "(()())()()(()())", "(()())()()(())()",
          "(()())()()()(())", "(()())()()()()()", "(())(((((())))))",
          "(())((((()()))))", "(())((((())())))", "(())((((()))()))",
          "(())((((())))())", "(())((((()))))()", "(())(((()(()))))",
          "(())(((()()())))", "(())(((()())()))", "(())(((()()))())",
          "(())(((()())))()", "(())(((())(())))", "(())(((())()()))",
          "(())(((())())())", "(())(((())()))()", "(())(((()))(()))",
          "(())(((()))()())", "(())(((()))())()", "(())(((())))(())",
          "(())(((())))()()", "(())((()((()))))", "(())((()(()())))",
          "(())((()(())()))", "(())((()(()))())", "(())((()(())))()",
          "(())((()()(())))", "(())((()()()()))", "(())((()()())())",
          "(())((()()()))()", "(())((()())(()))", "(())((()())()())",
          "(())((()())())()", "(())((()()))(())", "(())((()()))()()",
          "(())((())((())))", "(())((())(()()))", "(())((())(())())",
          "(())((())(()))()", "(())((())()(()))", "(())((())()()())",
          "(())((())()())()", "(())((())())(())", "(())((())())()()",
          "(())((()))((()))", "(())((()))(()())", "(())((()))(())()",
          "(())((()))()(())", "(())((()))()()()", "(())(()(((()))))",
          "(())(()((()())))", "(())(()((())()))", "(())(()((()))())",
          "(())(()((())))()", "(())(()(()(())))", "(())(()(()()()))",
          "(())(()(()())())", "(())(()(()()))()", "(())(()(())(()))",
          "(())(()(())()())", "(())(()(())())()", "(())(()(()))(())",
          "(())(()(()))()()", "(())(()()((())))", "(())(()()(()()))",
          "(())(()()(())())", "(())(()()(()))()", "(())(()()()(()))",
          "(())(()()()()())", "(())(()()()())()", "(())(()()())(())",
          "(())(()()())()()", "(())(()())((()))", "(())(()())(()())",
          "(())(()())(())()", "(())(()())()(())", "(())(()())()()()",
          "(())(())(((())))", "(())(())((()()))", "(())(())((())())",
          "(())(())((()))()", "(())(())(()(()))", "(())(())(()()())",
          "(())(())(()())()", "(())(())(())(())", "(())(())(())()()",
          "(())(())()((()))", "(())(())()(()())", "(())(())()(())()",
          "(())(())()()(())", "(())(())()()()()", "(())()((((()))))",
          "(())()(((()())))", "(())()(((())()))", "(())()(((()))())",
          "(())()(((())))()", "(())()((()(())))", "(())()((()()()))",
          "(())()((()())())", "(())()((()()))()", "(())()((())(()))",
          "(())()((())()())", "(())()((())())()", "(())()((()))(())",
          "(())()((()))()()", "(())()(()((())))", "(())()(()(()()))",
          "(())()(()(())())", "(())()(()(()))()", "(())()(()()(()))",
          "(())()(()()()())", "(())()(()()())()", "(())()(()())(())",
          "(())()(()())()()", "(())()(())((()))", "(())()(())(()())",
          "(())()(())(())()", "(())()(())()(())", "(())()(())()()()",
          "(())()()(((())))", "(())()()((()()))", "(())()()((())())",
          "(())()()((()))()", "(())()()(()(()))", "(())()()(()()())",
          "(())()()(()())()", "(())()()(())(())", "(())()()(())()()",
          "(())()()()((()))", "(())()()()(()())", "(())()()()(())()",
          "(())()()()()(())", "(())()()()()()()", "()((((((()))))))",
          "()(((((()())))))", "()(((((())()))))", "()(((((()))())))",
          "()(((((())))()))", "()(((((()))))())", "()(((((())))))()",
          "()((((()(())))))", "()((((()()()))))", "()((((()())())))",
          "()((((()()))()))", "()((((()())))())", "()((((()()))))()",
          "()((((())(()))))", "()((((())()())))", "()((((())())()))",
          "()((((())()))())", "()((((())())))()", "()((((()))(())))",
          "()((((()))()()))", "()((((()))())())", "()((((()))()))()",
          "()((((())))(()))", "()((((())))()())", "()((((())))())()",
          "()((((()))))(())", "()((((()))))()()", "()(((()((())))))",
          "()(((()(()()))))", "()(((()(())())))", "()(((()(()))()))",
          "()(((()(())))())", "()(((()(()))))()", "()(((()()(()))))",
          "()(((()()()())))", "()(((()()())()))", "()(((()()()))())",
          "()(((()()())))()", "()(((()())(())))", "()(((()())()()))",
          "()(((()())())())", "()(((()())()))()", "()(((()()))(()))",
          "()(((()()))()())", "()(((()()))())()", "()(((()())))(())",
          "()(((()())))()()", "()(((())((()))))", "()(((())(()())))",
          "()(((())(())()))", "()(((())(()))())", "()(((())(())))()",
          "()(((())()(())))", "()(((())()()()))", "()(((())()())())",
          "()(((())()()))()", "()(((())())(()))", "()(((())())()())",
          "()(((())())())()", "()(((())()))(())", "()(((())()))()()",
          "()(((()))((())))", "()(((()))(()()))", "()(((()))(())())",
          "()(((()))(()))()", "()(((()))()(()))", "()(((()))()()())",
          "()(((()))()())()", "()(((()))())(())", "()(((()))())()()",
          "()(((())))((()))", "()(((())))(()())", "()(((())))(())()",
          "()(((())))()(())", "()(((())))()()()", "()((()(((())))))",
          "()((()((()()))))", "()((()((())())))", "()((()((()))()))",
          "()((()((())))())", "()((()((()))))()", "()((()(()(()))))",
          "()((()(()()())))", "()((()(()())()))", "()((()(()()))())",
          "()((()(()())))()", "()((()(())(())))", "()((()(())()()))",
          "()((()(())())())", "()((()(())()))()", "()((()(()))(()))",
          "()((()(()))()())", "()((()(()))())()", "()((()(())))(())",
          "()((()(())))()()", "()((()()((()))))", "()((()()(()())))",
          "()((()()(())()))", "()((()()(()))())", "()((()()(())))()",
          "()((()()()(())))", "()((()()()()()))", "()((()()()())())",
          "()((()()()()))()", "()((()()())(()))", "()((()()())()())",
          "()((()()())())()", "()((()()()))(())", "()((()()()))()()",
          "()((()())((())))", "()((()())(()()))", "()((()())(())())",
          "()((()())(()))()", "()((()())()(()))", "()((()())()()())",
          "()((()())()())()", "()((()())())(())", "()((()())())()()",
          "()((()()))((()))", "()((()()))(()())", "()((()()))(())()",
          "()((()()))()(())", "()((()()))()()()", "()((())(((()))))",
          "()((())((()())))", "()((())((())()))", "()((())((()))())",
          "()((())((())))()", "()((())(()(())))", "()((())(()()()))",
          "()((())(()())())", "()((())(()()))()", "()((())(())(()))",
          "()((())(())()())", "()((())(())())()", "()((())(()))(())",
          "()((())(()))()()", "()((())()((())))", "()((())()(()()))",
          "()((())()(())())", "()((())()(()))()", "()((())()()(()))",
          "()((())()()()())", "()((())()()())()", "()((())()())(())",
          "()((())()())()()", "()((())())((()))", "()((())())(()())",
          "()((())())(())()", "()((())())()(())", "()((())())()()()",
          "()((()))(((())))", "()((()))((()()))", "()((()))((())())",
          "()((()))((()))()", "()((()))(()(()))", "()((()))(()()())",
          "()((()))(()())()", "()((()))(())(())", "()((()))(())()()",
          "()((()))()((()))", "()((()))()(()())", "()((()))()(())()",
          "()((()))()()(())", "()((()))()()()()", "()(()((((())))))",
          "()(()(((()()))))", "()(()(((())())))", "()(()(((()))()))",
          "()(()(((())))())", "()(()(((()))))()", "()(()((()(()))))",
          "()(()((()()())))", "()(()((()())()))", "()(()((()()))())",
          "()(()((()())))()", "()(()((())(())))", "()(()((())()()))",
          "()(()((())())())", "()(()((())()))()", "()(()((()))(()))",
          "()(()((()))()())", "()(()((()))())()", "()(()((())))(())",
          "()(()((())))()()", "()(()(()((()))))", "()(()(()(()())))",
          "()(()(()(())()))", "()(()(()(()))())", "()(()(()(())))()",
          "()(()(()()(())))", "()(()(()()()()))", "()(()(()()())())",
          "()(()(()()()))()", "()(()(()())(()))", "()(()(()())()())",
          "()(()(()())())()", "()(()(()()))(())", "()(()(()()))()()",
          "()(()(())((())))", "()(()(())(()()))", "()(()(())(())())",
          "()(()(())(()))()", "()(()(())()(()))", "()(()(())()()())",
          "()(()(())()())()", "()(()(())())(())", "()(()(())())()()",
          "()(()(()))((()))", "()(()(()))(()())", "()(()(()))(())()",
          "()(()(()))()(())", "()(()(()))()()()", "()(()()(((()))))",
          "()(()()((()())))", "()(()()((())()))", "()(()()((()))())",
          "()(()()((())))()", "()(()()(()(())))", "()(()()(()()()))",
          "()(()()(()())())", "()(()()(()()))()", "()(()()(())(()))",
          "()(()()(())()())", "()(()()(())())()", "()(()()(()))(())",
          "()(()()(()))()()", "()(()()()((())))", "()(()()()(()()))",
          "()(()()()(())())", "()(()()()(()))()", "()(()()()()(()))",
          "()(()()()()()())", "()(()()()()())()", "()(()()()())(())",
          "()(()()()())()()", "()(()()())((()))", "()(()()())(()())",
          "()(()()())(())()", "()(()()())()(())", "()(()()())()()()",
          "()(()())(((())))", "()(()())((()()))", "()(()())((())())",
          "()(()())((()))()", "()(()())(()(()))", "()(()())(()()())",
          "()(()())(()())()", "()(()())(())(())", "()(()())(())()()",
          "()(()())()((()))", "()(()())()(()())", "()(()())()(())()",
          "()(()())()()(())", "()(()())()()()()", "()(())((((()))))",
          "()(())(((()())))", "()(())(((())()))", "()(())(((()))())",
          "()(())(((())))()", "()(())((()(())))", "()(())((()()()))",
          "()(())((()())())", "()(())((()()))()", "()(())((())(()))",
          "()(())((())()())", "()(())((())())()", "()(())((()))(())",
          "()(())((()))()()", "()(())(()((())))", "()(())(()(()()))",
          "()(())(()(())())", "()(())(()(()))()", "()(())(()()(()))",
          "()(())(()()()())", "()(())(()()())()", "()(())(()())(())",
          "()(())(()())()()", "()(())(())((()))", "()(())(())(()())",
          "()(())(())(())()", "()(())(())()(())", "()(())(())()()()",
          "()(())()(((())))", "()(())()((()()))", "()(())()((())())",
          "()(())()((()))()", "()(())()(()(()))", "()(())()(()()())",
          "()(())()(()())()", "()(())()(())(())", "()(())()(())()()",
          "()(())()()((()))", "()(())()()(()())", "()(())()()(())()",
          "()(())()()()(())", "()(())()()()()()", "()()(((((())))))",
          "()()((((()()))))", "()()((((())())))", "()()((((()))()))",
          "()()((((())))())", "()()((((()))))()", "()()(((()(()))))",
          "()()(((()()())))", "()()(((()())()))", "()()(((()()))())",
          "()()(((()())))()", "()()(((())(())))", "()()(((())()()))",
          "()()(((())())())", "()()(((())()))()", "()()(((()))(()))",
          "()()(((()))()())", "()()(((()))())()", "()()(((())))(())",
          "()()(((())))()()", "()()((()((()))))", "()()((()(()())))",
          "()()((()(())()))", "()()((()(()))())", "()()((()(())))()",
          "()()((()()(())))", "()()((()()()()))", "()()((()()())())",
          "()()((()()()))()", "()()((()())(()))", "()()((()())()())",
          "()()((()())())()", "()()((()()))(())", "()()((()()))()()",
          "()()((())((())))", "()()((())(()()))", "()()((())(())())",
          "()()((())(()))()", "()()((())()(()))", "()()((())()()())",
          "()()((())()())()", "()()((())())(())", "()()((())())()()",
          "()()((()))((()))", "()()((()))(()())", "()()((()))(())()",
          "()()((()))()(())", "()()((()))()()()", "()()(()(((()))))",
          "()()(()((()())))", "()()(()((())()))", "()()(()((()))())",
          "()()(()((())))()", "()()(()(()(())))", "()()(()(()()()))",
          "()()(()(()())())", "()()(()(()()))()", "()()(()(())(()))",
          "()()(()(())()())", "()()(()(())())()", "()()(()(()))(())",
          "()()(()(()))()()", "()()(()()((())))", "()()(()()(()()))",
          "()()(()()(())())", "()()(()()(()))()", "()()(()()()(()))",
          "()()(()()()()())", "()()(()()()())()", "()()(()()())(())",
          "()()(()()())()()", "()()(()())((()))", "()()(()())(()())",
          "()()(()())(())()", "()()(()())()(())", "()()(()())()()()",
          "()()(())(((())))", "()()(())((()()))", "()()(())((())())",
          "()()(())((()))()", "()()(())(()(()))", "()()(())(()()())",
          "()()(())(()())()", "()()(())(())(())", "()()(())(())()()",
          "()()(())()((()))", "()()(())()(()())", "()()(())()(())()",
          "()()(())()()(())", "()()(())()()()()", "()()()((((()))))",
          "()()()(((()())))", "()()()(((())()))", "()()()(((()))())",
          "()()()(((())))()", "()()()((()(())))", "()()()((()()()))",
          "()()()((()())())", "()()()((()()))()", "()()()((())(()))",
          "()()()((())()())", "()()()((())())()", "()()()((()))(())",
          "()()()((()))()()", "()()()(()((())))", "()()()(()(()()))",
          "()()()(()(())())", "()()()(()(()))()", "()()()(()()(()))",
          "()()()(()()()())", "()()()(()()())()", "()()()(()())(())",
          "()()()(()())()()", "()()()(())((()))", "()()()(())(()())",
          "()()()(())(())()", "()()()(())()(())", "()()()(())()()()",
          "()()()()(((())))", "()()()()((()()))", "()()()()((())())",
          "()()()()((()))()", "()()()()(()(()))", "()()()()(()()())",
          "()()()()(()())()", "()()()()(())(())", "()()()()(())()()",
          "()()()()()((()))", "()()()()()(()())", "()()()()()(())()",
          "()()()()()()(())", "()()()()()()()()" }
    };

    Solution solution;
    for (int i = 0; i < 6; i++)
        {
            auto result = solution.generateParenthesis (i + 1);
            compareStringVectorsIgnoringOrder (result, expected[i]);
        }

    return 0;
}
